// Estrutura funcional corrigida para app com Supabase e Next.js (Opção 1)

// Arquivo: package.json
{
  "name": "esperanca-no-amor",
  "version": "1.0.0",
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start"
  },
  "dependencies": {
    "@supabase/supabase-js": "^2.39.6",
    "next": "13.4.19",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "react-icons": "^4.12.0",
    "react-native-paper": "^5.10.1"
  }
}

// Arquivo: lib/supabaseClient.js
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

export const supabase = createClient(supabaseUrl, supabaseAnonKey);

// Arquivo: pages/index.js
import { useEffect } from 'react';
import { useRouter } from 'next/router';
import { supabase } from '../lib/supabaseClient';

export default function Home() {
  const router = useRouter();

  useEffect(() => {
    supabase.auth.getUser().then(({ data: { user } }) => {
      if (user) router.push('/match');
    });
  }, []);

  const signInWithGoogle = async () => {
    await supabase.auth.signInWithOAuth({ provider: 'google' });
  };

  return (
    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: 100 }}>
      <h1>Esperança no Amor</h1>
      <button onClick={signInWithGoogle} style={{ padding: 10, marginTop: 20, fontSize: 16 }}>
        Entrar com Google
      </button>
    </div>
  );
}

// Arquivo: pages/match.js
import { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import { supabase } from '../lib/supabaseClient';

export default function Match() {
  const router = useRouter();
  const [user, setUser] = useState(null);
  const [profiles, setProfiles] = useState([]);
  const [currentIndex, setCurrentIndex] = useState(0);

  useEffect(() => {
    supabase.auth.getUser().then(({ data: { user } }) => {
      if (!user) router.push('/');
      else {
        setUser(user);
        fetchProfiles();
      }
    });
  }, []);

  const fetchProfiles = async () => {
    const { data, error } = await supabase.from('profiles').select('*');
    if (!error) setProfiles(data.filter(p => p.id !== user?.id));
  };

  const handleLike = async () => {
    const likedProfile = profiles[currentIndex];
    await supabase.from('likes').insert({ from: user.id, to: likedProfile.id });
    setCurrentIndex(currentIndex + 1);
  };

  const handleSkip = () => {
    setCurrentIndex(currentIndex + 1);
  };

  const currentProfile = profiles[currentIndex];

  return (
    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: 50 }}>
      <h2>Encontre seu par ❤️</h2>
      {currentProfile ? (
        <div style={{ border: '1px solid #ccc', padding: 20, margin: 20 }}>
          <h3>{currentProfile.name}</h3>
          <p>{currentProfile.bio}</p>
          <div>
            <button onClick={handleSkip} style={{ marginRight: 10 }}>❌ Passar</button>
            <button onClick={handleLike}>❤️ Curtir</button>
          </div>
        </div>
      ) : (
        <p>Sem mais perfis no momento.</p>
      )}
    </div>
  );
}
